using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace T3Scheduler
{
    public partial class Form6 : Form
    {
        private string basepath;
        private string airport;
        private string database;
        private Form1 parent;
        public Form6(string basepath, string airport, string database, Form1 parent)
        {
            InitializeComponent();
            this.Text = "More ...";
            this.basepath = basepath;
            this.database = database;
            this.airport = airport;
            this.parent = parent;

            label3.Text = "";
            comboBox1.SelectedIndex = 1;
            updateInfo();
        }

        private void updateInfo()
        {
            if(comboBox1.SelectedIndex == 0) 
            {
                string current = Path.Combine(basepath, "Airports", airport, "databases", database, "backup");
                label2.Text = "This action should ONLY be used after the schedules were updated from external sources!\n\n";
                label2.Text += "This should never be done with a schedule generated by this program as it will distort information used to generate schedules.\n\n";
                label2.Text += "A backup of old original schedule files will be generated as a precaution in directory \n'" + current + "'";
            }
            else if (comboBox1.SelectedIndex == 1) 
            {
                label2.Text = "This action will restore all \"default\" and \"NyergesDesign\" databases and schedules to their original state.\n\n";
                label2.Text += "It will go over all folders in TS3 Airports folder, looking for databases\\default and databases\\NyergesDesign folders\n\n";
                label2.Text += "This action should be executed BEFORE any TS3 update that can change airports or databases. It will remove any \n";
                label2.Text += "generated or imported schedules kept in the folders described above. After the upgrade you can use T3Scheduler normally.";
            }
            else
            {
                label2.Text = "";
            }
        }

        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            updateInfo();
        }

        private void button2_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void restore(string path)
        {
            if (File.Exists(Path.Combine(path, "backup", "schedule.csv"))) File.Copy(Path.Combine(path, "backup", "schedule.csv"), Path.Combine(path, "schedule.csv"), true);
            if (File.Exists(Path.Combine(path, "backup", "schedule.csv"))) File.Delete(Path.Combine(path, "backup", "schedule.csv"));
            if (File.Exists(Path.Combine(path, "backup", "ga.csv"))) File.Copy(Path.Combine(path, "backup", "ga.csv"), Path.Combine(path, "ga.csv"), true);
            if (File.Exists(Path.Combine(path, "backup", "ga.csv"))) File.Delete(Path.Combine(path, "backup", "ga.csv"));
            if (File.Exists(Path.Combine(path, "backup", "terminals.csv"))) File.Copy(Path.Combine(path, "backup", "terminals.csv"), Path.Combine(path, "terminals.csv"), true);
            if (File.Exists(Path.Combine(path, "backup", "terminals.csv"))) File.Delete(Path.Combine(path, "backup", "terminals.csv"));
        }

        private void button1_Click(object sender, EventArgs e)
        {
            if (comboBox1.SelectedIndex == 0)
            {
                string current = Path.Combine(basepath, "Airports", airport, "databases", database);
                if (!Directory.Exists(Path.Combine(current, "backup")))
                {
                    label3.Text = "no backup files found - program hasn't been run for this airport yet";
                    return;
                }
                if(MessageBox.Show("Are you sure you want to set new baseline statitics from current schedule?\nIf it isn't proper schedule the schedules generated may all be wrong.", "WARNING", MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.No)
                {
                    return;
                }
                try
                {
                    Random rnd = new Random();
                    int ii = rnd.Next(1000, 100000000);
                    string suffix = DateTime.Now.ToString("yyyyMMddHHmmss") + "-" + ii.ToString("D8");
                    if (File.Exists(Path.Combine(current, "backup", "schedule.csv"))) File.Copy(Path.Combine(current, "backup", "schedule.csv"), Path.Combine(current, "backup", "schedule.csv." + suffix));
                    if (File.Exists(Path.Combine(current, "backup", "ga.csv"))) File.Copy(Path.Combine(current, "backup", "ga.csv"), Path.Combine(current, "backup", "ga.csv." + suffix));
                    if (File.Exists(Path.Combine(current, "backup", "terminals.csv"))) File.Copy(Path.Combine(current, "backup", "terminals.csv"), Path.Combine(current, "backup", "terminals.csv." + suffix));
                    File.Copy(Path.Combine(current, "schedule.csv"), Path.Combine(current, "backup", "schedule.csv"), true);
                    File.Copy(Path.Combine(current, "ga.csv"), Path.Combine(current, "backup", "ga.csv"), true);
                    File.Copy(Path.Combine(current, "terminals.csv"), Path.Combine(current, "backup", "terminals.csv"), true);
                    label3.Text = "backup files recreated in \"" + current + "\"";
                }
                catch (Exception ee)
                {
                    label3.Text = "I don't have permision to write to Tower Simulator 3 database directories!\n\n";
                    label3.Text += "Usually it happens when Tower Simulator 3 is installed in asystem folder like 'Program Files'.\n\n";
                    label3.Text += "The solution is to run T3Scheduler as administrator, for example you can right-click on it and select 'Run as administrator'\n\n";
                    label3.Text += "You can also right-click on it, select 'Properties', then 'Compatibility' and then check checkbox 'Run this program as administrator'.";
                    label3.Text += "\n\n" + ee.Message;
                    return;
                }
                parent.form6applied = true;
            }
            else if (comboBox1.SelectedIndex == 1)
            {
                label3.Text = "";
                string[] airpds = Directory.GetDirectories(Path.Combine(basepath, "Airports"));
                foreach (string airpd in airpds)
                {
                    string current = Path.Combine(airpd, "databases", "default");
                    if (File.Exists(Path.Combine(current, "backup", "schedule.csv")) || File.Exists(Path.Combine(current, "backup", "ga.csv")))
                    {
                        restore(current);
                        label3.Text += new DirectoryInfo(airpd).Name + " default RESTORED\n";
                    }
                    else
                    {
                        label3.Text += new DirectoryInfo(airpd).Name + " default OK\n";
                    }
                    current = Path.Combine(airpd, "databases", "NyergesDesign");
                    if (File.Exists(Path.Combine(current, "backup", "schedule.csv")) || File.Exists(Path.Combine(current, "backup", "ga.csv")))
                    {
                        restore(current);
                        label3.Text += new DirectoryInfo(airpd).Name + " NyergesDesign RESTORED\n";
                    }
                    else
                    {
                        label3.Text += new DirectoryInfo(airpd).Name + " NyergesDesign OK\n";
                    }
                }
                parent.form6applied = true;
            }
            else
            {
                label3.Text = "Unknown action";
            }
        }
    }
}
